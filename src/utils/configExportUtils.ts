import type { ContainerConfig } from '../types';

/**
 * Generate a structured JSON configuration file with metadata
 * Includes schema version for future compatibility
 */
export function generateConfigJSON(config: ContainerConfig): string {
  const configObject = {
    $schema: 'https://raw.githubusercontent.com/AMD-melliott/llm-sizer/main/schemas/container-config-v1.json',
    version: '1.0',
    generated: new Date().toISOString(),
    metadata: {
      model: {
        id: config.model.id,
        name: config.model.name,
        parameters: `${config.model.parameters}B`,
      },
      hardware: {
        gpuCount: config.gpuCount,
        gpuModel: config.gpus[0]?.name || 'Unknown',
        totalVRAM: `${config.memoryUsage.available.toFixed(1)}GB`,
      },
      memory: {
        estimated: `${config.memoryUsage.estimated.toFixed(1)}GB`,
        percentage: `${config.memoryUsage.percentage.toFixed(1)}%`,
        sharedMemory: config.shmSize,
      },
      image: {
        repository: config.image.repository,
        tag: config.image.tag,
        fullImage: config.image.fullImage,
        stability: config.image.stability,
        rocmVersion: config.image.rocmVersion,
      },
    },
    container: {
      name: config.containerName,
      useContainerToolkit: config.useContainerToolkit,
      useHostNetwork: config.useHostNetwork,
    },
    volumes: config.volumes.map((v) => ({
      hostPath: v.hostPath,
      containerPath: v.containerPath,
      readOnly: v.readOnly,
      description: v.description,
    })),
    environment: config.environment.map((e) => ({
      key: e.key,
      value: e.sensitive ? '${' + e.key + '}' : e.value,
      sensitive: e.sensitive,
      description: e.description,
    })),
    ports: config.ports.map((p) => ({
      host: p.host,
      container: p.container,
      protocol: p.protocol || 'tcp',
      description: p.description,
    })),
    engineParameters: config.engineParams.map((p) => ({
      flag: p.flag,
      value: p.value,
    })),
  };

  return JSON.stringify(configObject, null, 2);
}

/**
 * Generate a comprehensive README file with usage instructions
 */
export function generateREADME(config: ContainerConfig): string {
  const lines: string[] = [];

  lines.push(`# ${config.model.name} Container Configuration`);
  lines.push('');
  lines.push(`Generated by AMD LLM Sizer on ${new Date().toLocaleDateString()}`);
  lines.push('');

  // Overview
  lines.push('## Overview');
  lines.push('');
  lines.push(`This configuration deploys ${config.model.name} (${config.model.parameters}B parameters) for inference on AMD GPUs using ${config.engine.name}.`);
  lines.push('');

  // Hardware Requirements
  lines.push('## Hardware Requirements');
  lines.push('');
  lines.push(`- **GPUs**: ${config.gpuCount}x ${config.gpus[0]?.name || 'AMD GPU'}`);
  lines.push(`- **Total VRAM**: ${config.memoryUsage.available.toFixed(1)}GB`);
  lines.push(`- **Estimated Usage**: ${config.memoryUsage.estimated.toFixed(1)}GB (${config.memoryUsage.percentage.toFixed(1)}%)`);
  lines.push(`- **Shared Memory**: ${config.shmSize}`);
  lines.push('');

  // Prerequisites
  lines.push('## Prerequisites');
  lines.push('');
  lines.push('1. **Docker** (version 19.03 or higher)');
  lines.push('   ```bash');
  lines.push('   docker --version');
  lines.push('   ```');
  lines.push('');

  if (config.useContainerToolkit) {
    lines.push('2. **AMD Container Toolkit**');
    lines.push('   - Installation guide: https://rocm.docs.amd.com/projects/container-toolkit');
    lines.push('   - Verify installation:');
    lines.push('     ```bash');
    lines.push('     docker info | grep -i runtime');
    lines.push('     ```');
    lines.push('');
  } else {
    lines.push('2. **ROCm Drivers** installed on host system');
    lines.push('   - Installation guide: https://rocm.docs.amd.com/');
    lines.push('');
  }

  const sensitiveVars = config.environment.filter((e) => e.sensitive);
  if (sensitiveVars.length > 0) {
    lines.push('3. **Environment Variables**');
    sensitiveVars.forEach((env) => {
      lines.push(`   - \`${env.key}\`: ${env.description || 'Required for operation'}`);
    });
    lines.push('');
  }

  // Quick Start
  lines.push('## Quick Start');
  lines.push('');

  lines.push('### Using Docker Run');
  lines.push('');
  lines.push('1. Make the script executable:');
  lines.push('   ```bash');
  lines.push(`   chmod +x run-${config.containerName}.sh`);
  lines.push('   ```');
  lines.push('');

  if (sensitiveVars.length > 0) {
    lines.push('2. Set required environment variables:');
    lines.push('   ```bash');
    sensitiveVars.forEach((env) => {
      lines.push(`   export ${env.key}=your-${env.key.toLowerCase().replace(/_/g, '-')}`);
    });
    lines.push('   ```');
    lines.push('');
  }

  const stepNum = sensitiveVars.length > 0 ? 3 : 2;
  lines.push(`${stepNum}. Run the script:`);
  lines.push('   ```bash');
  lines.push(`   ./run-${config.containerName}.sh`);
  lines.push('   ```');
  lines.push('');

  lines.push('### Using Docker Compose');
  lines.push('');

  if (sensitiveVars.length > 0) {
    lines.push('1. Create a `.env` file with your sensitive values:');
    lines.push('   ```bash');
    sensitiveVars.forEach((env) => {
      lines.push(`   ${env.key}=your-value-here`);
    });
    lines.push('   ```');
    lines.push('');
  }

  const composeStep = sensitiveVars.length > 0 ? 2 : 1;
  lines.push(`${composeStep}. Start the container:`);
  lines.push('   ```bash');
  lines.push('   docker-compose up -d');
  lines.push('   ```');
  lines.push('');

  // Accessing the API
  lines.push('## Accessing the API');
  lines.push('');
  const apiPort = config.ports[0]?.host || 8000;
  lines.push(`The vLLM API will be available at: \`http://localhost:${apiPort}\``);
  lines.push('');
  lines.push('Test the endpoint:');
  lines.push('```bash');
  lines.push(`curl http://localhost:${apiPort}/v1/models`);
  lines.push('```');
  lines.push('');

  // Container Management
  lines.push('## Container Management');
  lines.push('');
  lines.push('### View Logs');
  lines.push('```bash');
  lines.push(`docker logs -f ${config.containerName}`);
  lines.push('```');
  lines.push('');

  lines.push('### Stop Container');
  lines.push('```bash');
  lines.push(`docker stop ${config.containerName}`);
  lines.push('```');
  lines.push('');

  lines.push('### Restart Container');
  lines.push('```bash');
  lines.push(`docker restart ${config.containerName}`);
  lines.push('```');
  lines.push('');

  lines.push('### Remove Container');
  lines.push('```bash');
  lines.push(`docker rm ${config.containerName}`);
  lines.push('```');
  lines.push('');

  lines.push('### Shell Access');
  lines.push('```bash');
  lines.push(`docker exec -it ${config.containerName} bash`);
  lines.push('```');
  lines.push('');

  // Troubleshooting
  lines.push('## Troubleshooting');
  lines.push('');

  lines.push('### Out of Memory (OOM) Errors');
  lines.push('- Reduce `--max-model-len` parameter');
  lines.push('- Use lower quantization (e.g., int4 instead of fp16)');
  lines.push('- Reduce batch size or concurrent users');
  lines.push('- Increase `--gpu-memory-utilization` cautiously (max 0.95)');
  lines.push('');

  lines.push('### Container Fails to Start');
  lines.push('- Verify GPU access: `rocm-smi` or `rocminfo`');
  lines.push('- Check Docker logs: `docker logs ' + config.containerName + '`');
  if (config.useContainerToolkit) {
    lines.push('- Verify Container Toolkit: `docker info | grep -i runtime`');
  }
  lines.push('- Ensure no port conflicts: `lsof -i :' + apiPort + '`');
  lines.push('');

  lines.push('### Slow Inference Performance');
  lines.push('- Verify all GPUs are being used: check logs for tensor parallel size');
  lines.push('- Monitor GPU utilization: `watch -n 1 rocm-smi`');
  lines.push('- Check for CPU throttling or memory pressure on host');
  lines.push('- Ensure shared memory is sufficient (current: ' + config.shmSize + ')');
  lines.push('');

  // Additional Resources
  lines.push('## Additional Resources');
  lines.push('');
  lines.push('- [vLLM Documentation](' + config.engine.documentation + ')');
  lines.push('- [AMD Container Toolkit](https://rocm.docs.amd.com/projects/container-toolkit)');
  lines.push('- [ROCm Documentation](https://rocm.docs.amd.com/)');
  lines.push('- [AMD LLM Sizer](https://github.com/AMD-melliott/llm-sizer)');
  lines.push('');

  lines.push('---');
  lines.push('');
  lines.push(`Configuration generated: ${new Date().toISOString()}`);

  return lines.join('\n');
}

/**
 * Generate .env template file for Docker Compose
 */
export function generateEnvTemplate(config: ContainerConfig): string {
  const lines: string[] = [];

  lines.push('# Environment Variables for Docker Compose');
  lines.push(`# Generated: ${new Date().toISOString()}`);
  lines.push('#');
  lines.push('# IMPORTANT: Do not commit this file with real values to version control');
  lines.push('# Add .env to your .gitignore file');
  lines.push('#');
  lines.push('');

  // Sensitive variables
  const sensitiveVars = config.environment.filter((e) => e.sensitive);
  if (sensitiveVars.length > 0) {
    lines.push('# Sensitive Variables (Required)');
    sensitiveVars.forEach((env) => {
      if (env.description) {
        lines.push(`# ${env.description}`);
      }
      lines.push(`${env.key}=`);
      lines.push('');
    });
  }

  // Optional variables
  const optionalVars = config.environment.filter((e) => !e.sensitive);
  if (optionalVars.length > 0) {
    lines.push('# Optional Variables');
    optionalVars.forEach((env) => {
      if (env.description) {
        lines.push(`# ${env.description}`);
      }
      lines.push(`# ${env.key}=${env.value}`);
      lines.push('');
    });
  }

  return lines.join('\n');
}
